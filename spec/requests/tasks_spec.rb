# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:project) { create(:projects_user, role: :owner).project }
  let(:user) { project.owner }
  let(:task) { create(:task, creator: user, project: project) }
  let(:valid_attributes) do
    { name: 'task name', assignee_id: user.id }
  end

  let(:invalid_attributes) do
    { name: '', assignee_id: user.id }
  end

  before { sign_in(user) }

  describe 'GET /index' do
    it 'renders a successful response' do
      get project_tasks_url(project)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get project_task_url(project, task)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_project_task_url(project)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      get edit_project_task_url(project, task)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Task' do
        expect do
          post project_tasks_url(project), params: { task: valid_attributes }
        end.to change(Task, :count).by(1)
      end

      it 'redirects to the created task' do
        post project_tasks_url(project), params: { task: valid_attributes }
        expect(response).to redirect_to(project_task_url(project, Task.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Task' do
        expect do
          post project_tasks_url(project), params: { task: invalid_attributes }
        end.to change(Task, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post project_tasks_url(project), params: { task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'new name' }
      end

      it 'updates the requested task' do
        patch project_task_url(project, task), params: { task: new_attributes }
        task.reload
        expect(task.name).to eq('new name')
      end

      it 'redirects to the task' do
        patch project_task_url(project, task), params: { task: new_attributes }
        task.reload
        expect(response).to redirect_to(project_task_url(project, task))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch project_task_url(project, task), params: { task: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
